@page "/"
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IChatHubService _chatHubService;
@inject IChatApiService _chatApiService;

<div class="chat">
    <div class="chat-left-side">
        <div class="chat-username">
            <input class="chat-username-field" @bind="_userNameInput" type="text" placeholder="Enter your username"/>
            <div class="sender-button" @onclick="UpdateUserNameAsync">Ok</div>
        </div>

        <hr class="chat-list-line"/>
        
        <h2>Topics</h2>
        
        <div class="chat-list">
            @foreach (var room in _rooms)
            {
                <div class="chat-list-element" @onclick="() => SelectRoom(room)">
                    <img class="element-image" src=@($"images/{room.Name}.png") alt=@room.Name/>

                    <div class="element-name">
                        <span>@room.Name</span>
                    </div>
                </div>
            }

            <hr class="chat-list-line"/>
        </div>
    </div>

    <div class="chat-right-side">
        @if (_chat != null)
        {
            <div class="chat-header">
                <div class="chat-header-title">
                    <img class="element-image" src=@($"images/{_chat.Name}.png") alt=@_chat.Name/>

                    <div class="element-name">
                        <span>@_chat.Name</span>
                    </div>
                </div>

                <hr class="chat-header-line"/>
            </div>
        }

        <div class="chat-body">
            @foreach (var message in _messages)
            {
                <div class="chat-body-message @ColorMessage(message) @MoveMessageToRight(message)">
                    <span class="message-username">@message.UserName</span>
                    <span class="message-content">@message.Content</span>
                    <span class="message-date">@message.CreationDate.ToString("HH:mm")</span>
                </div>
            }
        </div>

        <div class="chat-sender">
            <input class="sender-input" @bind="_message.Content" type="text" placeholder="Enter a message"/>
            <div class="sender-button" @onclick="SendMessageAsync">Send</div>
        </div>


        <div class="chat-error">
             @_error
        </div>
    </div>
</div>

@code 
{
    private MessageModel _message = new MessageModel();
    private List<MessageModel> _messages = new List<MessageModel>();
    private List<ChatRoomModel> _rooms = new List<ChatRoomModel>();
    private ChatRoomModel _chat;
    private UserModel _user;
    private bool _isUserAdded = false;
    private string _userNameInput;
    private string _error;

    protected override async Task OnInitializedAsync()
    {
        _rooms = await _chatApiService.GetAllRooms();

        _chatHubService.OnReceiveMessage(HandleReceivedMessage);
        _chatHubService.OnReceiveError(HandleReceivedError);

        await SelectRoom(_rooms[0]);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isUserAdded)
        {
            _user = await _chatApiService.AddUser(new UserModel() { UserName = "Anonim" });
            _isUserAdded = true;
        }
    }

    private async Task SelectRoom(ChatRoomModel chatRoomModel)
    {
        if(_chatHubService.IsConnected())
            await _chatHubService.CloseAsync();
        
        await _chatHubService.StartAsync();
        await _chatHubService.JoinChat(chatRoomModel);

        _chat = chatRoomModel;
        _messages = await _chatApiService.GetMessagesByRoom(chatRoomModel.Id);

        await InvokeAsync(StateHasChanged);
    }

    private void HandleReceivedMessage(MessageModel receivedMessage)
    {
        _messages.Add(receivedMessage);

        InvokeAsync(StateHasChanged);
    }

    private void HandleReceivedError(string errorMessage, string content)
    {
        _error = errorMessage;
        _message.Content = content;

        InvokeAsync(StateHasChanged);
    }

    private async Task SendMessageAsync()
    {
        _message.UserId = _user.Id;
        _message.ChatRoomId = _chat.Id;
        _message.CreationDate = DateTime.UtcNow;
        await _chatHubService.SendMessageAsync(_chat, _message);

        _message.Content = string.Empty;
    }

    private async Task UpdateUserNameAsync()
    {
        if (!string.IsNullOrEmpty(_userNameInput))
        {
            _user.UserName = _userNameInput;
            _user = await _chatApiService.UpdateUser(_user);
        }
    }

    private string ColorMessage(MessageModel message)
    {
        return message.Sentiment switch
        {
            "Positive" => "message-positive",
            "Neutral" => "message-neutral",
            "Negative" => "message-negative",
            _ => ""
        };
    }

    private string MoveMessageToRight(MessageModel message)
    {
        return message.UserId == _user?.Id ? "own" : ""; 
    }

    public async ValueTask DisposeAsync()
    {
        await _chatHubService.CloseAsync();
    }
}